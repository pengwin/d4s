# -*- mode: ruby -*-
# vi: set ft=ruby :

# File 'cluster-config.rb' should be generated by the terragrunt generate block
require_relative 'cluster-config'

#vms = {
#  "control-plane-master" => "172.16.122.10",
  #"control-plane-node-1" : "172.16.122.11",
  #"control-plane-node-2" : "172.16.122.12",
#  "worker-node-1" => "172.16.122.13",
  #"worker-node-2" : "172.16.122.14",
#}

# Load values from config
vms = ClusterConfig.vms()
cluster_name = ClusterConfig.cluster_name()
host_ip = ClusterConfig.host_ip()
username = ClusterConfig.username()
ca_cert_pem = ClusterConfig.ca_cert_pem()
ca_key_pem = ClusterConfig.ca_key_pem()
ansible_playbook_path = ClusterConfig.ansible_playbook_path()

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.box = "centos/stream9"
  config.vm.box_version = "20241216.0"

  network = "vagrant-kube-libvirt"

  default_network = "vagrant-libvirt"

  counter = 0

  vms.each do |hostname, vm_config|
    # vm configuration
    ip = vm_config['ip']
    cpus = vm_config['cpus']
    memory = vm_config['memory']
    vdisk_size = vm_config['vdisk_size_gb']

    config.vm.define hostname do |node|
      node.vm.hostname = hostname

      node.vm.provider :libvirt do |libvirt|
        # Enable forwarding of forwarded_port with id 'ssh'.
        libvirt.forward_ssh_port = true
        libvirt.graphics_type = "none"
        libvirt.cpus = cpus
        libvirt.memory = memory
        #libvirt.machine_virtual_size = vdisk_size
      end

      node.vm.network :private_network,
        :ip => ip,
        :libvirt__netmask => '255.255.255.0',
        :libvirt__network_name => network,
        :libvirt__dhcp_enabled => false,
        :libvirt__host_ip => host_ip,
        :libvirt__guest_ipv6 => false

      counter += 1
      
      # Only execute once the Ansible provisioner,
      # when all the machines are up and ready.
      if counter == vms.length
        node.vm.provision :ansible do |ansible|
          # Disable default limit to connect to all the machines
          ansible.limit = "all"
          ansible.playbook = ansible_playbook_path
          ansible.extra_vars = {
            "cluster_name": cluster_name,
            "username": username,
            "machines": vms,
            "ca_cert_pem": ca_cert_pem,
            "ca_key_pem": ca_key_pem,
          }
          #ansible.verbose = "vv"
        end
      end
    end
  end
  
end
