/*
 * External DNS Webhook Server
 *
 * Implements the external DNS webhook endpoints.
 *
 * The version of the OpenAPI document: v0.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct UpdateApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> UpdateApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> UpdateApiClient<C> {
        UpdateApiClient {
            configuration,
        }
    }
}

pub trait UpdateApi: Send + Sync {
    fn adjust_records(&self, endpoint: Vec<models::Endpoint>) -> Pin<Box<dyn Future<Output = Result<Vec<models::Endpoint>, Error>> + Send>>;
    fn set_records(&self, changes: models::Changes) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
}

impl<C: Connect>UpdateApi for UpdateApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn adjust_records(&self, endpoint: Vec<models::Endpoint>) -> Pin<Box<dyn Future<Output = Result<Vec<models::Endpoint>, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/adjustendpoints".to_string())
        ;
        req = req.with_body_param(endpoint);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_records(&self, changes: models::Changes) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/records".to_string())
        ;
        req = req.with_body_param(changes);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
