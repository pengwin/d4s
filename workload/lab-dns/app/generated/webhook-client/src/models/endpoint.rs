/*
 * External DNS Webhook Server
 *
 * Implements the external DNS webhook endpoints.
 *
 * The version of the OpenAPI document: v0.15.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Endpoint : This is a DNS record. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Endpoint {
    #[serde(rename = "dnsName", skip_serializing_if = "Option::is_none")]
    pub dns_name: Option<String>,
    /// This is the list of targets that this DNS record points to. So for an A record it will be a list of IP addresses. 
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<Vec<String>>,
    #[serde(rename = "recordType", skip_serializing_if = "Option::is_none")]
    pub record_type: Option<String>,
    #[serde(rename = "setIdentifier", skip_serializing_if = "Option::is_none")]
    pub set_identifier: Option<String>,
    #[serde(rename = "recordTTL", skip_serializing_if = "Option::is_none")]
    pub record_ttl: Option<i64>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "providerSpecific", skip_serializing_if = "Option::is_none")]
    pub provider_specific: Option<Vec<models::ProviderSpecificProperty>>,
}

impl Endpoint {
    /// This is a DNS record. 
    pub fn new() -> Endpoint {
        Endpoint {
            dns_name: None,
            targets: None,
            record_type: None,
            set_identifier: None,
            record_ttl: None,
            labels: None,
            provider_specific: None,
        }
    }
}

